#include <stdio.h>
int cmp(const void* p1, const void* p2)
{
	return *(int*)p1 - *(int*)p2;
}
int main()
{
	int n = 0;
	scanf("%d", &n);
	int* ptr = (int*)calloc(n, sizeof(int));
	if (ptr == NULL)
	{
		return 1;
	}
	int i = 0;
	for (i = 0; i < n; i++)
	{
		scanf("%d", ptr + i);
	}
	int num = 0;
	int tmp = 0;
	int tol = n;
	qsort(ptr, n, sizeof(*ptr), cmp);
	for (i = 0; i < n - 1; i++)
	{
		tmp = 0;
		if (*(ptr + i) == *(ptr + i + 1))
		{
			num++;
		}
		else
		{
			tmp=1;
		}
		if (tmp == 1)
		{
			if (*(ptr + i) == 0)
			{
				if (num == 0)
				{
					printf("%d\n", 1);
					return 0;
				}
				else
				{
					printf("%d\n", 0);
					return 0;
				}
			}
			if (*(ptr + i) == 1)
			{
				tol -= (num +1);
			}
			else
			{
				tol -= num;
			}
			num = 0;
		}
	}
	printf("%d\n", tol);
	free(ptr);
	ptr = NULL;
	return 0;
}
